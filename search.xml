<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java基础语法（二）</title>
      <link href="/2024/08/09/Java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2024/08/09/Java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="判断与循环"><a href="#判断与循环" class="headerlink" title="判断与循环"></a>判断与循环</h1><h2 id="if的使用"><a href="#if的使用" class="headerlink" title="if的使用"></a>if的使用</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">if(/**/)&#123;</span><br><span class="line">    /**/</span><br><span class="line">&#125;else if(/**/)&#123;</span><br><span class="line">  /**/</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"> else&#123;</span><br><span class="line"> /**/</span><br><span class="line"> &#125; </span><br></pre></td></tr></table></figure><p>用法完全与C语言相同。当大括号中只有一句代码时，也是可以省略大括号的。</p><p><strong>注意：boolean型的变量可直接放入if的括号中进行判断</strong>。示例如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">boolean flag = true;</span><br><span class="line">if (flag) &#123;</span><br><span class="line">    /**/</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="switch的使用"><a href="#switch的使用" class="headerlink" title="switch的使用"></a>switch的使用</h2><h3 id="标准写法（与C语言相同）"><a href="#标准写法（与C语言相同）" class="headerlink" title="标准写法（与C语言相同）"></a>标准写法（与C语言相同）</h3><p><img src="/../imgs/$%7Bfiilename%7D/20240809p1.jpg" alt="20240809p1"></p><p><strong>注意：long&#x2F;float&#x2F;double不能作为表达式；</strong></p><p>（1）default可省略，且不一定写在最下面，可以写在任意位置。</p><p>（2）</p><h3 id="简化写法（JDK12的新特性）"><a href="#简化写法（JDK12的新特性）" class="headerlink" title="简化写法（JDK12的新特性）"></a>简化写法（JDK12的新特性）</h3>]]></content>
      
      
      
        <tags>
            
            <tag> Java学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>原码、反码、补码</title>
      <link href="/2024/08/09/%E5%8E%9F%E7%A0%81%E3%80%81%E5%8F%8D%E7%A0%81%E3%80%81%E8%A1%A5%E7%A0%81/"/>
      <url>/2024/08/09/%E5%8E%9F%E7%A0%81%E3%80%81%E5%8F%8D%E7%A0%81%E3%80%81%E8%A1%A5%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h2 id="原码"><a href="#原码" class="headerlink" title="原码"></a>原码</h2><ol><li>定义：十进制数据的二进制表现形式，最左边是符号位，0为正，1为负。</li></ol><p>例：56→0011 1000，其中最左边的0表示符号位，其余的表示数据</p><p>其中，每一个0或1称为一个<u>bit（比特位）</u>，八个bit分为一组，称为一个<u>字节</u>。</p><p><strong>字节是计算机中最小的存储单元</strong></p><ol start="2"><li><strong>利用原码对正数进行计算没有问题； 但如果是负数计算，结果就会出错，且实际运算的结果与预期的结果正好相反。</strong></li></ol><hr><h2 id="反码"><a href="#反码" class="headerlink" title="反码"></a>反码</h2><ol><li><p>作用：为了解决原码不能计算负数的问题而出现的。</p></li><li><p>计算规则：（1）正数的反码不变；（2）负数的反码在原码的基础上，<u>符号位不变</u>，数值取反（即0变1，1变0）</p></li></ol><p>例：</p><p>（1）-56→（原码）1011 1000→（反码）1100 0111</p><p>-56+1&#x3D;-55，用反码来计算：1100 0111 + 1 &#x3D; 1100 1000（-55的反码）→1011 0111（-55的原码）</p><p>（2）如下图所示<img src="/../imgs/$%7Bfiilename%7D/202408091.jpg" alt="202408091"></p><p><strong>若用原码进行负数的计算，-4 + 1 &#x3D; -3，但（-4的原码）1000 0100 + 1 &#x3D; 1000 0101（-5的原码）；</strong></p><p><strong>-4 - 1 &#x3D; -5，但（-4的原码）1000 0100 - 1 &#x3D; 1000 0011（-3的原码</strong>）<strong>。</strong></p><p><strong>这就是上文所说的，实际运算的结果与预期结果正好相反。</strong></p><p>而用反码计算，则能得到正确的结果。</p><p>（3）但是在反码中，0存在两种表现形式：+0（0000 0000）和-0（1111 1111）</p><p>【1111 1111（-0）+ 1 &#x3D; 0000 0000（+0）→ -0 +1 &#x3D; +0】<img src="/../imgs/$%7Bfiilename%7D/202408092.jpg" alt="202408092"></p><p><strong>因此，在进行不夸零的计算时，反码计算没有问题；但若是跨零的计算，如上图所示的-4+7，或者-0+0，则会出现误差。</strong></p><p>问题产生的原因是存在两个零。</p><hr><h1 id="补码"><a href="#补码" class="headerlink" title="补码"></a>补码</h1><p>使用补码来弥补反码跨零计算产生的问题。</p><p>**<u>在计算机中，数字的存储及运算都是以补码的形式来进行的。</u>**（原码&#x2F;反码均会产生误差）</p><p><img src="/../imgs/$%7Bfiilename%7D/202408093.jpg" alt="202408093"></p><p>如图所示，对于负数，其补码刚刚好与反码错开一位，以解决反码存在两个零所产生的误差。</p><p><strong>负数的补码&#x3D;负数的反码+1</strong>（+1以错开+0&#x2F;-0的情况）</p><p><u><strong>正数的原码、反码、补码均一致！！！</strong></u></p><p><img src="/../imgs/$%7Bfiilename%7D/202408094.jpg" alt="202408094"></p><p>由上述结论可知，-127的补码为1000 0001，则-127 - 1 &#x3D; -128，其补码为1000 0001 - 1 &#x3D; 1000 0000</p><p>因为在计算机中的数据存贮与计算通过补码来进行，所以，<strong>规定补码1000 0000 为十进制数-128，且-128没有原码和反码。</strong></p><hr><h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><h2 id="同样一个数字，在不同的基本数据类型（byte-short-int-long）下的区别"><a href="#同样一个数字，在不同的基本数据类型（byte-short-int-long）下的区别" class="headerlink" title="同样一个数字，在不同的基本数据类型（byte&#x2F;short&#x2F;int&#x2F;long）下的区别"></a>同样一个数字，在不同的基本数据类型（byte&#x2F;short&#x2F;int&#x2F;long）下的区别</h2><p><img src="/../imgs/$%7Bfiilename%7D/202408095.jpg" alt="202408095"></p><h2 id="隐式转换的底层原理"><a href="#隐式转换的底层原理" class="headerlink" title="隐式转换的底层原理"></a>隐式转换的底层原理</h2><p><img src="/../imgs/$%7Bfiilename%7D/202408096.jpg" alt="202408096"></p><p><strong>核心：</strong>在前面补零</p><h2 id="强制转换的底层原理"><a href="#强制转换的底层原理" class="headerlink" title="强制转换的底层原理"></a>强制转换的底层原理</h2><p><img src="/../imgs/$%7Bfiilename%7D/202408097-17231438358713.jpg" alt="202408097"></p><p><img src="/../imgs/$%7Bfiilename%7D/202408098.jpg" alt="202408098"></p><p><strong>核心：</strong>删去前面多余的bit，仅留下要强转的类型所剩的bit</p><h2 id="其他运算符的底层原理"><a href="#其他运算符的底层原理" class="headerlink" title="其他运算符的底层原理"></a>其他运算符的底层原理</h2><p><img src="/../imgs/$%7Bfiilename%7D/2024080910.jpg" alt="2024080910"></p><p>这些运算符与平时我们使用的或且非运算符不完全相同，且这种方式并不常用。</p><h3 id="逻辑与-、逻辑或"><a href="#逻辑与-、逻辑或" class="headerlink" title="逻辑与 &amp; 、逻辑或 |"></a>逻辑与 &amp; 、逻辑或 |</h3><p>像这种计算数字的逻辑与&amp;&#x2F;逻辑或|，不存在短路。</p><p><img src="/../imgs/$%7Bfiilename%7D/2024080912.jpg" alt="2024080912"></p><p>如上图所示，<code>a&amp;b</code>的意思是，将a、b均转化成补码形式，写成右侧竖式的模样。当同一列的两个数字均为1时，得到的结果为1；但凡存在一个0，得到的结果为0。将得到的结果对齐写在虚线下方，最终得到一个新的数字的补码。这个补码所对应的十进制数即为<code>a&amp;b</code>的值。</p><p><img src="/../imgs/$%7Bfiilename%7D/2024080913.jpg" alt="2024080913"></p><p>逻辑或 |同理，只不过规则变成：同一列两个数均为0，得到0；只要存在一个1，得到的结果就为1。</p><h3 id="左移-、右移"><a href="#左移-、右移" class="headerlink" title="左移 &lt;&lt; 、右移&gt;&gt;"></a>左移 &lt;&lt; 、右移&gt;&gt;</h3><p><img src="/../imgs/$%7Bfiilename%7D/2024080914.jpg" alt="2024080914"></p><p><code>a&lt;&lt;2</code>即把a转化为补码形式，再将整体向左移动两个bit，空的地方补零，由此得到一个新的数，便是计算结果。</p><p><img src="/../imgs/$%7Bfiilename%7D/2024080915.jpg" alt="2024080915"></p><p><code>a&gt;&gt;2</code>即把a转化为补码形式后，整体向右移动两位。空出的部分，若为符号位，则根据原来数的正负补0或1（原来的数为正，补0；为负，则补1），剩下的全都补0；由此得到一个新数，便是计算结果。</p><p><strong>【tip：若是左移，左移一次，相当于原来的十进制数乘2，左移两次则是乘4，以此类推。右移同理，右移一次除以2，两次则除以4，以此类推】</strong></p><h3 id="无符号右移"><a href="#无符号右移" class="headerlink" title="无符号右移 &gt;&gt;&gt;"></a>无符号右移 &gt;&gt;&gt;</h3><p>规则同右移&gt;&gt;相同，但是无论原来的数为正还是为负，最高位（即符号位）均补0。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 乱七八糟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础语法（一）</title>
      <link href="/2024/08/08/Java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2024/08/08/Java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="HelloWorld案例（基础格式）"><a href="#HelloWorld案例（基础格式）" class="headerlink" title="HelloWorld案例（基础格式）"></a>HelloWorld案例（基础格式）</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（1）第一行的<code>Main</code>是类名，类名应与文件名保持一致。且在写算法题时，应把类名定义为<code>Main</code>。</p><p>（2）<code>public static void main(String[] args) &#123; &#125;</code>简写<code>psvm</code>。</p><p>（3）<code>public static void main(String[] args) &#123; &#125;</code> 简写 <code>sout</code>。</p><h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><h2 id="单行注释"><a href="#单行注释" class="headerlink" title="单行注释"></a>单行注释</h2><p>快捷键ctrl+&#x2F;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注释信息</span></span><br></pre></td></tr></table></figure><h2 id="多行注释"><a href="#多行注释" class="headerlink" title="多行注释"></a>多行注释</h2><p>快捷键ctrl+shift+&#x2F;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/*注释信息*/</span><br></pre></td></tr></table></figure><h1 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h1><p><img src="/../imgs/$%7Bfiilename%7D/202408081.jpg" alt="202408081"></p><p>（1）<code>true/false</code>打印时可直接打印。</p><p>（2）<code>null</code>无法直接打印，只能以字符串的形式打印<code>&quot;null&quot;</code>。</p><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><p>分为<u>基本数据类型</u>和<u>引用数据类型</u></p><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><p><img src="/../imgs/$%7Bfiilename%7D/202408082.jpg" alt="202408082"></p><p>a.  整数默认<code>int</code>，浮点数默认<code>double</code></p><p>b. <code>byte</code>取值范围：**-128~127**，要记忆</p><p>c. 整数和小数取值范围大小关系：<code>double &gt; flout &gt; long &gt; int &gt; short &gt; byte</code></p><h2 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h2><p>包括对象、数组、接口</p><h1 id="标识符：就是给类、变量、方法等起名"><a href="#标识符：就是给类、变量、方法等起名" class="headerlink" title="标识符：就是给类、变量、方法等起名"></a>标识符：就是给类、变量、方法等起名</h1><h2 id="标识符命名规则硬性要求"><a href="#标识符命名规则硬性要求" class="headerlink" title="标识符命名规则硬性要求"></a>标识符命名规则硬性要求</h2><p>a. 由字母、数字、下划线（_）和美元符（$）组成</p><p>b. 不能以数字开头</p><p>c. 不能是关键字</p><p>d. 区分大小写</p><h2 id="软性建议"><a href="#软性建议" class="headerlink" title="软性建议"></a>软性建议</h2><p><strong>见名知意！！！</strong></p><p><img src="/../imgs/$%7Bfiilename%7D/202408083.jpg" alt="202408083"></p><h1 id="键盘录入"><a href="#键盘录入" class="headerlink" title="键盘录入"></a>键盘录入</h1><p><img src="/../imgs/$%7Bfiilename%7D/202408084.jpg" alt="202408084"></p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（1）<code>nextInt()</code>表明接收的是int类型数据，若接收的数据为double，<code>nextInt()</code>应改为<code>nextDouble()</code>，以此类推。</p><p>（2）idea设置了插件后会自动生成导包。</p><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><h2 id="算术运算符：加、减、乘、除、取模（取余）"><a href="#算术运算符：加、减、乘、除、取模（取余）" class="headerlink" title="算术运算符：加、减、乘、除、取模（取余）"></a>算术运算符：加、减、乘、除、取模（取余）</h2><p>注意： 在代码中，若有小数参与计算，结果有可能是不精确的</p><hr><h3 id="补充：隐式转换和强制转换"><a href="#补充：隐式转换和强制转换" class="headerlink" title="补充：隐式转换和强制转换"></a>补充：隐式转换和强制转换</h3><p>（1）数字进行运算时，数据类型不一样不能进行计算，需要转成一样的，才能运算</p><p>（2）隐式转换：取值范围小的数值→取值范围大的数值（自动类型提升）</p><p>a. 隐式转换是程序自动帮我们完成，相当于把1L的水倒入8L的容器中</p><p>b. 取值范围小的和取值范围大的进行运算，小的会先提升为大的再进行运算</p><p>c. <code>byte/short/char</code>三种类型的数据在运算的时候，都会先直接提升为<code>int</code>，然后再进行运算</p><p>（3）强制转换：取值范围大的数值→取值范围小的数值</p><p>a. 把一个取值范围大的数值赋值给取值范围小的变量，是不允许直接赋值的，若一定要这么做，需要加入强制转换。这个过程相当于把8L水倒入1L容器中，因此数据可能在强转过程中发生错误。如：double 12.3 强转为int,12.3→12。</p><p>b. 格式：目标数据类型 变量名 &#x3D; (目标数据类型) 被强转的数据;</p><p>示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">12.3</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> (<span class="type">int</span>) a;<span class="comment">//b=12</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">byte</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"><span class="type">byte</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"><span class="type">byte</span> <span class="variable">res</span> <span class="operator">=</span> (<span class="type">byte</span>) (c + d);<span class="comment">//res=-56</span></span><br><span class="line"><span class="comment">//这是由于200数据过大，已超过byte取值范围，因此数据发生错误</span></span><br></pre></td></tr></table></figure><hr><h3 id="补充：字符串的”-”操作"><a href="#补充：字符串的”-”操作" class="headerlink" title="补充：字符串的”+”操作"></a>补充：字符串的”+”操作</h3><p>（1）当”+”操作中出现了字符串时，这个”+”就变成了字符串连接符，而非算术运算符。它会将前后数据进行拼接并产生一个新的字符串。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;123&quot;</span> + <span class="number">123</span> = <span class="string">&quot;123123&quot;</span>;</span><br></pre></td></tr></table></figure><p>（2）连续进行”+”操作时，从左到右逐个执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> + <span class="number">99</span> + <span class="string">&quot;年&quot;</span> + <span class="number">2</span> + <span class="number">1</span> = <span class="string">&quot;100年21&quot;</span>;</span><br></pre></td></tr></table></figure><p>（3）字符串和变量拼接</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;a=&quot;</span> + a);<span class="comment">//打印“a=100”</span></span><br></pre></td></tr></table></figure><p>（4）当 字符+字符&#x2F;字符+数字 时，会把字符通过ASCII码表查询到对应的数字再进行计算</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="number">1</span> + <span class="string">&#x27;a&#x27;</span>);<span class="comment">//98</span></span><br><span class="line"><span class="comment">//ASCII码表中，a对应97</span></span><br><span class="line">System.out.println(<span class="string">&#x27;a&#x27;</span> + <span class="string">&quot;abc&quot;</span>);<span class="comment">//aabc</span></span><br><span class="line"><span class="comment">//在加的过程中只要有字符串参与，都会变成字符串拼接</span></span><br></pre></td></tr></table></figure><hr><h2 id="自增自减运算符"><a href="#自增自减运算符" class="headerlink" title="自增自减运算符"></a>自增自减运算符</h2><p>跟C语言一样</p><p><img src="/../imgs/$%7Bfiilename%7D/202408085.jpg" alt="202408085"></p><h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><p>和C语言一样（存在a+&#x3D;b这种）</p><p><em><em>注意：+&#x3D; ，-&#x3D; ，</em>&#x3D; ，&#x2F;&#x3D; ，%&#x3D;的底层都隐含了强制类型转换</em>* </p><h2 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h2><p>和C语言一样</p><p>注意：关系运算符的结果都是<code>boolean</code>类型的，要么是<code>true</code>要么是<code>false</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="variable">res1</span> <span class="operator">=</span> <span class="number">2</span> &gt;= <span class="number">1</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">res2</span> <span class="operator">=</span> <span class="number">1</span> &gt;= <span class="number">2</span>;</span><br><span class="line">System.out.println(res1);<span class="comment">//true</span></span><br><span class="line">System.out.println(res2);<span class="comment">//false</span></span><br></pre></td></tr></table></figure><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><p>和C语言有些不同，但是<code>&amp;</code>与<code>|</code>一般不使用，而是使用短路逻辑运算符<code>&amp;&amp;</code>与<code>||</code></p><p><img src="/../imgs/$%7Bfiilename%7D/202408086.jpg" alt="202408086"></p><p><img src="/../imgs/$%7Bfiilename%7D/202408087.jpg" alt="202408087"></p><p>注意：逻辑运算符<code>&amp;</code> 和<code>|</code>，无论左边<code>true/false</code>，右边都要执行；而短路逻辑运算符，若左边能确定整个表达式的结果，则右边不执行，反之右边执行（如此提高了代码效率）</p><h2 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h2><p>不常用</p><h1 id="注意！！！"><a href="#注意！！！" class="headerlink" title="注意！！！"></a>注意！！！</h1><p><strong>Java要求在局部变量被使用之前必须进行初始化！！！</strong></p><p>即，定义一个变量a时，可以写成：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int a = 1;</span><br></pre></td></tr></table></figure><p>也可以：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int a;</span><br><span class="line">a = 1;</span><br></pre></td></tr></table></figure><p>但不能只写int a；而省略a&#x3D;1;</p><p>这点和C语言不同。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机中的数据存储</title>
      <link href="/2024/08/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/"/>
      <url>/2024/08/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/</url>
      
        <content type="html"><![CDATA[<p><strong>在计算机中，任意数据都是以二进制形式来存储</strong></p><p>1.二进制：逢二进一，借一当二</p><p>2.常见的进制：</p><p>（1）二进制：由0、1组成，代码中以<u>0b</u>开头</p><p>（2）十进制：由0~9组成，默认十进制，<u>不用加任何前缀</u></p><p>（3）八进制：由0~7组成，代码中以<u>0</u>开头</p><p>（4）十六进制：由0<del>9和a</del>f组成【a&#x3D;10、b&#x3D;11、c&#x3D;12、d&#x3D;13、e&#x3D;14、f&#x3D;15】，代码中以<u>0x</u>开头</p><p>3.计算机使用二进制存储数据的原因</p><p>只用两种状态就能表示二进制。在之前是纸带有孔和无孔，现在是高压电流和低压电流（大于3.3V定为1，小于3.3V定为0）</p><p>4.进制转换</p><p>（1）任意进制转十进制</p><p><img src="/../imgs/$%7Bfiilename%7D/1.jpg" alt="1"></p><p><img src="/../imgs/$%7Bfiilename%7D/2.jpg" alt="2"></p><p><img src="/../imgs/$%7Bfiilename%7D/3.jpg" alt="3"></p><p>（2）十进制转其他进制</p><p><img src="/../imgs/$%7Bfiilename%7D/4.jpg" alt="4"></p><p>【电脑上的计算器可以直接进行进制转换的计算】</p><hr><p>【补充】</p><p>显示器中的三个知识点：分辨率、像素、三原色</p><p>1.电脑显示器：如2k屏、4k屏（这个指的是最大分辨率）</p><p><img src="/../imgs/$%7Bfiilename%7D/7.jpg" alt="7"></p><p>以1920*1080为例：</p><p>显示器宽1920个小格子，高1080个小格子，每一个小方格称为一个像素。如下图所示：</p><p><img src="/../imgs/$%7Bfiilename%7D/8.jpg" alt="8"></p><p>如设计软件时，规定软件大小，通常以像素为单位</p><hr><p><strong>计算机中的数据一般分为三类：Text文本、Image图片、Sound声音（视频&#x3D;图片+声音）</strong></p><p>1.Text文本数据：包括数字、字母、汉字</p><p>（1）数字：十进制数字通过进制转换，转换成二进制数字存储</p><p>（2）字母：通过ASCII码表转换成十进制数，再转换成二进制数存储</p><p><img src="/../imgs/$%7Bfiilename%7D/5.jpg" alt="5"></p><p>（3）汉字：同样是通过码表进行转换</p><p><img src="/../imgs/$%7Bfiilename%7D/6.jpg" alt="6"></p><p>2.Image图片数据：分为黑白图、灰度图、彩色图三种</p><p>（2）黑白图</p><p><img src="/../imgs/$%7Bfiilename%7D/9.jpg" alt="9"></p><p>其中，1表示白色，0表示黑色。黑白图&#x3D;按照这个规则给每一个像素点填充颜色</p><p>（3）灰度图</p><p><img src="/../imgs/$%7Bfiilename%7D/10.jpg" alt="10"></p><p>灰度表中，0&#x3D;纯黑，255&#x3D;纯白，0~255不同数值代表不同程度的灰色</p><p>（3）彩色图</p><p>a.计算机中的三原色：红、绿、蓝(也称为RGB，取red&#x2F;green&#x2F;blue首字母)</p><p>可在0~255（10进制）范围内给三原色设置不同的值，如此可搭配出不同的颜色</p><p><img src="/../imgs/$%7Bfiilename%7D/11.jpg" alt="11"></p><p>也可用十六进制来表示（FF&#x3D;255）</p><p><img src="/../imgs/$%7Bfiilename%7D/12.jpg" alt="12"></p><p>3.Sound声音数据</p><p>涉及声音的波形图，每一个取样点都有与之相对应的数字。</p><p>音质越好，说明取样的点越密集</p><p><img src="/../imgs/$%7Bfiilename%7D/13.jpg" alt="13"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 乱七八糟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用的cmd命令</title>
      <link href="/2024/08/07/%E5%B8%B8%E7%94%A8%E7%9A%84cmd%E5%91%BD%E4%BB%A4/"/>
      <url>/2024/08/07/%E5%B8%B8%E7%94%A8%E7%9A%84cmd%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>win+r打开cmd</p><p><img src="/../imgs/$%7Bfiilename%7D/0c7cf0568282e4b88628181c7ef3f646.jpg" alt="0c7cf0568282e4b88628181c7ef3f646"></p><p>（1）dir会显示当前目录下所有的文件、文件夹（包括隐藏的文件、文件夹）</p><p>（2）tab键：自动补全（不必打出完整的文件名）</p>]]></content>
      
      
      
        <tags>
            
            <tag> 乱七八糟 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
